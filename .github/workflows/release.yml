# This workflow will create ant test a new release

name: release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  min_linux:
    name: linux with min supported deps
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.7
      uses: actions/setup-python@v5
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        make install_deps
        sudo apt update && sudo apt install \
          git \
          cmake \
          gcc-multilib \
          g++-multilib \
          wget \
          unzip
    - name: Check (Skipping H.266 due to old Ubuntu version)
      run: |
        SKIP_H266=1 make check
    - name: Test Build the wheel
      run: |
        pip wheel .
    - name: Build all reference decoders
      run: |
        make all_reference_decoders
    - name: Clean up
      run: |
        make clean

  linux:
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: 3.13
    - name: Install system build tools and libraries
      run: |
        sudo apt update
        sudo apt install -y build-essential cmake git pkg-config nasm ffmpeg
    - name: Install VVdeC dependency for H.266
      run: |
        git clone --depth 1 https://github.com/fraunhoferhhi/vvdec.git
        cd vvdec
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
        make -j$(nproc)
        sudo make install
        sudo ldconfig
        cd ../..
        rm -rf vvdec
    - name: Install dependencies
      run: |
        make install_deps
        sudo apt install -y \
          git \
          cmake \
          gcc-multilib \
          g++-multilib \
          wget \
          unzip
    - name: Check
      run: |
        make check
    - name: Test Build the wheel
      run: |
        pip wheel .
    - name: Build all reference decoders
      run: |
        make all_reference_decoders
    - name: Clean up
      run: |
        make clean

  windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.7
      uses: actions/setup-python@v5
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        make install_deps
    - name: Check
      run: |
        make check
    - name: Test Build the wheel
      run: |
        pip wheel .

  create_release:
    name: Create Release and Publish
    runs-on: ubuntu-22.04
    concurrency: create_release
    needs:
      - min_linux
      - linux
      - windows

    permissions:
      id-token: write
      contents: write

    steps:
    - name: Checkout repository at workflow sha
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.sha }}
    - name: Force correct release branch on workflow sha
      run: |
        git checkout -B ${{ github.ref_name }} ${{ github.sha }}
    - name: Create semantic version release
      id: release
      uses: python-semantic-release/python-semantic-release@v10.3.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        git_committer_name: "github-actions"
        git_committer_email: "actions@users.noreply.github.com"
        changelog: true
    - name: Set up Python 3.7
      uses: actions/setup-python@v5
      with:
        python-version: '3.7'
        cache: pip
        cache-dependency-path: '**/pyproject.toml'
    - name: Install dependencies
      run: |
        pip install setuptools setuptools-scm wheel build
    - name: Build package
      run: |
        python -m build
    - name: Publish and upload package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      if: steps.release.outputs.released == 'true'
      with:
        password: ${{ secrets.PYPI_TOKEN }}
    - name: Publish and upload to GitHub Release Assets
      uses: python-semantic-release/publish-action@v10.3.1
      if: steps.release.outputs.released == 'true'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.release.outputs.tag }}
